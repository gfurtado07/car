const OpenAI = require('openai');
const config = require('../config');

const openai = new OpenAI({
  apiKey: config.openaiApiKey
});

// Armazenamento em mem√≥ria das conversas (ser√° substitu√≠do pelo banco depois)
const conversas = new Map();

/**
 * Prompts do sistema para diferentes contextos
 */
const SYSTEM_PROMPTS = {
  atendimento: `Voc√™ √© o assistente CAR (Central de Atendimento ao Representante) da KX3 Galtecom.

SUAS RESPONSABILIDADES:
- Atender representantes e clientes com excel√™ncia
- Ajudar na abertura de chamados t√©cnicos
- Fornecer informa√ß√µes sobre produtos e servi√ßos
- Coletar dados necess√°rios para atendimento
- Encaminhar para departamentos espec√≠ficos

DEPARTAMENTOS DISPON√çVEIS:
- T√©cnico: Problemas com equipamentos, configura√ß√µes
- Comercial: Vendas, or√ßamentos, contratos
- Financeiro: Cobran√ßas, pagamentos, faturas
- Suporte: D√∫vidas gerais, treinamentos

FLUXO DE ABERTURA DE CHAMADO:
1. Colete: Nome completo, empresa, telefone, e-mail
2. Identifique o departamento adequado
3. Descreva detalhadamente o problema/solicita√ß√£o
4. Defina prioridade (baixa, m√©dia, alta, urgente)
5. Gere um protocolo √∫nico

INSTRU√á√ïES:
- Seja sempre cordial e profissional
- Fa√ßa perguntas claras e objetivas
- Mantenha o foco na resolu√ß√£o
- Confirme informa√ß√µes importantes
- Responda sempre em portugu√™s brasileiro

Quando for abrir um chamado, use este formato JSON na resposta:
{
  "tipo": "abertura_chamado",
  "dados": {
    "nome": "Nome do cliente",
    "empresa": "Nome da empresa", 
    "telefone": "Telefone",
    "email": "Email",
    "departamento": "t√©cnico|comercial|financeiro|suporte",
    "assunto": "Resumo do problema",
    "descricao": "Descri√ß√£o detalhada",
    "prioridade": "baixa|m√©dia|alta|urgente"
  },
  "resposta_usuario": "Mensagem para o usu√°rio"
}`
};

/**
 * Processa conversa com OpenAI mantendo hist√≥rico
 */
async function conversar(mensagemUsuario, telegramId, contextoExtra = {}) {
  try {
    // Recupera ou cria hist√≥rico da conversa
    let historicoConversa = conversas.get(telegramId) || [];
    
    // Adiciona mensagem do usu√°rio ao hist√≥rico
    historicoConversa.push({
      role: 'user',
      content: mensagemUsuario
    });

    // Monta mensagens para a API
    const messages = [
      {
        role: 'system',
        content: SYSTEM_PROMPTS.atendimento
      },
      ...historicoConversa
    ];

    console.log('ü§ñ Enviando para OpenAI:', mensagemUsuario);
    console.log('üìö Hist√≥rico tem', historicoConversa.length, 'mensagens');

    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: messages,
      temperature: 0.7,
      max_tokens: 1000,
      presence_penalty: 0.1,
      frequency_penalty: 0.1
    });

    const resposta = completion.choices[0].message.content;

    // Adiciona resposta do assistente ao hist√≥rico
    historicoConversa.push({
      role: 'assistant',
      content: resposta
    });

    // Limita hist√≥rico a √∫ltimas 20 mensagens para n√£o estourar tokens
    if (historicoConversa.length > 20) {
      historicoConversa = historicoConversa.slice(-20);
    }

    // Salva hist√≥rico atualizado
    conversas.set(telegramId, historicoConversa);

    console.log('‚úÖ Resposta OpenAI recebida');

    return {
      resposta: resposta,
      tokens_usados: completion.usage.total_tokens,
      modelo: completion.model
    };

  } catch (error) {
    console.error('‚ùå Erro na OpenAI:', error.message);
    
    // Fallback para erro
    return {
      resposta: "Ol√°! Sou o assistente CAR da KX3 Galtecom. Como posso ajud√°-lo hoje? Para abrir um chamado, digite 'abrir chamado'.",
      erro: true
    };
  }
}

/**
 * Limpa hist√≥rico de conversa de um usu√°rio
 */
function limparHistorico(telegramId) {
  conversas.delete(telegramId);
  console.log(`üóëÔ∏è Hist√≥rico limpo para usu√°rio ${telegramId}`);
}

/**
 * Tenta parsear JSON da resposta
 */
function tentarParsearJSON(texto) {
  try {
    const jsonMatch = texto.match(/\{[\s\S]*\}/);
    if (jsonMatch) {
      return JSON.parse(jsonMatch[0]);
    }
    return null;
  } catch (error) {
    return null;
  }
}

module.exports = {
  conversar,
  limparHistorico,
  tentarParsearJSON
};
