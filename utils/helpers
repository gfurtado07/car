const { Client } = require('pg');
const config = require('../config');

let client;

/**
 * Inicializa a conexão com o PostgreSQL e garante que a tabela 'usuarios' exista.
 */
async function inicializarBancoDados() {
  if (client) return client;

  client = new Client({
    connectionString: process.env.DATABASE_URL
  });

  try {
    await client.connect();
    
    // Cria tabela se não existir
    await client.query(`
      CREATE TABLE IF NOT EXISTS usuarios (
        telegram_id BIGINT PRIMARY KEY,
        nome TEXT NOT NULL,
        email TEXT,
        root_id TEXT
      );
    `);
    
    // Adiciona coluna root_id se não existir (para tabelas já criadas)
    await client.query(`
      ALTER TABLE usuarios 
      ADD COLUMN IF NOT EXISTS root_id TEXT;
    `);
    
    console.log('✅ PostgreSQL conectado e tabela "usuarios" pronta com root_id.');
    return client;
  } catch (error) {
    console.error('❌ Erro ao conectar no PostgreSQL:', error);
    throw error;
  }
}

/**
 * Insere ou atualiza um usuário na tabela 'usuarios'.
 */
async function salvarUsuario(telegramId, nome, email = null, rootId = null) {
  if (!client) await inicializarBancoDados();
  try {
    const res = await client.query(
      `INSERT INTO usuarios (telegram_id, nome, email, root_id) 
       VALUES ($1, $2, $3, $4)
       ON CONFLICT (telegram_id) 
       DO UPDATE SET 
         nome = $2, 
         email = COALESCE($3, usuarios.email),
         root_id = COALESCE($4, usuarios.root_id)
       RETURNING *;`,
      [telegramId, nome, email, rootId]
    );
    return res.rows[0];
  } catch (error) {
    console.error('❌ Erro ao salvar usuário:', error);
    return null;
  }
}

/**
 * Atualiza apenas o root_id de um usuário
 */
async function atualizarRootId(telegramId, rootId) {
  if (!client) await inicializarBancoDados();
  try {
    const res = await client.query(
      `UPDATE usuarios SET root_id = $1 WHERE telegram_id = $2 RETURNING *;`,
      [rootId, telegramId]
    );
    return res.rows[0] || null;
  } catch (error) {
    console.error('❌ Erro ao atualizar root_id:', error);
    return null;
  }
}

/**
 * Busca um usuário pelo telegram_id.
 */
async function buscarUsuario(telegramId) {
  if (!client) await inicializarBancoDados();
  try {
    const res = await client.query(
      `SELECT * FROM usuarios WHERE telegram_id = $1;`,
      [telegramId]
    );
    return res.rows[0] || null;
  } catch (error) {
    console.error('❌ Erro ao buscar usuário:', error);
    return null;
  }
}

module.exports = {
  inicializarBancoDados,
  salvarUsuario,
  buscarUsuario,
  atualizarRootId,
  client
};


