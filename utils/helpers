const { Client } = require('pg');
const config = require('../config');

let client;

/**
 * Inicializa a conexão com o PostgreSQL e garante que as tabelas existam.
 */
async function inicializarBancoDados() {
  if (client) return client;

  client = new Client({
    connectionString: process.env.DATABASE_URL
  });

  try {
    await client.connect();
    
    // Tabela de usuários
    await client.query(`
      CREATE TABLE IF NOT EXISTS usuarios (
        telegram_id BIGINT PRIMARY KEY,
        nome TEXT NOT NULL,
        email TEXT,
        root_id BIGINT
      );
    `);

    // Nova tabela de chamados
    await client.query(`
      CREATE TABLE IF NOT EXISTS chamados (
        id SERIAL PRIMARY KEY,
        protocolo TEXT UNIQUE NOT NULL,
        data_hora TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        telegram_id BIGINT REFERENCES usuarios(telegram_id),
        nome TEXT NOT NULL,
        empresa TEXT NOT NULL,
        telefone TEXT NOT NULL,
        email TEXT NOT NULL,
        departamento TEXT NOT NULL,
        assunto TEXT NOT NULL,
        descricao TEXT NOT NULL,
        prioridade TEXT NOT NULL,
        status TEXT DEFAULT 'aberto',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);
    
    console.log('✅ PostgreSQL conectado - Tabelas usuarios e chamados prontas');
    return client;
  } catch (error) {
    console.error('❌ Erro ao conectar no PostgreSQL:', error);
    throw error;
  }
}

/**
 * Salva um chamado no PostgreSQL (backup)
 */
async function salvarChamado(chamado) {
  if (!client) await inicializarBancoDados();
  try {
    const res = await client.query(
      `INSERT INTO chamados (
        protocolo, telegram_id, nome, empresa, telefone, email,
        departamento, assunto, descricao, prioridade, status
      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
      RETURNING *;`,
      [
        chamado.protocolo, chamado.telegram_id, chamado.nome, chamado.empresa,
        chamado.telefone, chamado.email, chamado.departamento, chamado.assunto,
        chamado.descricao, chamado.prioridade, chamado.status
      ]
    );
    return res.rows[0];
  } catch (error) {
    console.error('❌ Erro ao salvar chamado no PostgreSQL:', error);
    return null;
  }
}

/**
 * Busca chamados de um usuário no PostgreSQL
 */
async function buscarChamadosPorUsuario(telegramId) {
  if (!client) await inicializarBancoDados();
  try {
    const res = await client.query(
      `SELECT * FROM chamados WHERE telegram_id = $1 ORDER BY created_at DESC;`,
      [telegramId]
    );
    return res.rows;
  } catch (error) {
    console.error('❌ Erro ao buscar chamados:', error);
    return [];
  }
}

// Funções existentes (manter como estão)
async function salvarUsuario(telegramId, nome, email = null, rootId = null) {
  if (!client) await inicializarBancoDados();
  try {
    const rootIdNumber = rootId !== null && rootId !== undefined ? Number(rootId) : null;
    
    const res = await client.query(
      `INSERT INTO usuarios (telegram_id, nome, email, root_id) 
       VALUES ($1, $2, $3, $4)
       ON CONFLICT (telegram_id) 
       DO UPDATE SET 
         nome = $2, 
         email = COALESCE($3, usuarios.email),
         root_id = COALESCE($4, usuarios.root_id)
       RETURNING *;`,
      [telegramId, nome, email, rootIdNumber]
    );
    return res.rows[0];
  } catch (error) {
    console.error('❌ Erro ao salvar usuário:', error);
    return null;
  }
}

async function buscarUsuario(telegramId) {
  if (!client) await inicializarBancoDados();
  try {
    const res = await client.query(
      `SELECT * FROM usuarios WHERE telegram_id = $1;`,
      [telegramId]
    );
    return res.rows[0] || null;
  } catch (error) {
    console.error('❌ Erro ao buscar usuário:', error);
    return null;
  }
}

module.exports = {
  inicializarBancoDados,
  salvarUsuario,
  buscarUsuario,
  salvarChamado,
  buscarChamadosPorUsuario,
  client
};



